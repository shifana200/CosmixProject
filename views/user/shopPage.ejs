<!DOCTYPE HTML>
<html>
	<head>
	<title>Cosmix website</title>
   <meta charset="utf-8">
   <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

	<link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,500,600,700" rel="stylesheet">
	<link href="https://fonts.googleapis.com/css?family=Rokkitt:100,300,400,700" rel="stylesheet">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

	
	<!-- Animate.css -->
	<link rel="stylesheet" href="css/animate.css">
	<!-- Icomoon Icon Fonts-->
	<link rel="stylesheet" href="css/icomoon.css">
	<!-- Ion Icon Fonts-->
	<link rel="stylesheet" href="css/ionicons.min.css">
	<!-- Bootstrap  -->
	<link rel="stylesheet" href="/css/bootstrap.min.css">

	<!-- Magnific Popup -->
	<link rel="stylesheet" href="css/magnific-popup.css">

	<!-- Flexslider  -->
	<link rel="stylesheet" href="css/flexslider.css">

	<!-- Owl Carousel -->
	<link rel="stylesheet" href="/css/owl.carousel.min.css">
	<link rel="stylesheet" href="css/owl.theme.default.min.css">
	
	<!-- Date Picker -->
	<link rel="stylesheet" href="css/bootstrap-datepicker.css">
	<!-- Flaticons  -->
	<link rel="stylesheet" href="fonts/flaticon/font/flaticon.css">

	<!-- Theme style  -->
	<link rel="stylesheet" href="/css/style.css">

	<style>
		#filter-btn{
			color: black;
			font-weight: 500;
			background-color: #84CBCB;
			padding: 5px;
			margin-bottom: 10px;
			border-radius: 5px;
			border: none;
		}
.product-entry {
  position: relative;
}

.wishlist-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  background: rgba(255, 255, 255, 0.9);
  border: none;
  border-radius: 50%;
  padding: 5px;
  width: 35px;
  height: 35px;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  transition: all 0.3s ease;
  z-index: 1000;
}

.wishlist-btn:hover {
  background: rgba(255, 0, 0, 0.8);
}

.wishlist-btn .fa-heart {
  color: #ff6b6b;
  font-size: 16px;
}

.wishlist-btn:hover .fa-heart {
  color: #fff;
}


/* Container for the filter items (in a row) */
.filter-box {
  display: flex;
  justify-content: space-between;
  background-color: #eaeaea;  /* Slight cream color */
  border: 1px solid #ddd;
  padding: 10px;
  border-radius: 10px;
  width: 100%;
  max-width: 900px;
  margin: 20px auto;
}

/* Each filter item (text + dropdown) */
.filter-item {
  position: relative;
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 10px;
}

/* Style for the filter text */
.filter-text {
  font-size: 16px;
  color: #007bff;
  font-weight: bold;
  cursor: pointer;
}

/* Style for the dropdown menu */
.dropdown-content {
  display: none;
  position: absolute;
  background-color: white;
  min-width: 160px;
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
  z-index: 1;
  border-radius: 5px;
  margin-top: 5px;
  width: 100%;
  box-sizing: border-box;
}

/* Links inside the dropdown */
.dropdown-content a {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
  font-size: 14px;
}

/* Change color of dropdown items on hover */
.dropdown-content a:hover {
  background-color: #ddd;
}

/* Show dropdown on hover */
.filter-item:hover .dropdown-content {
  display: block;
}

/* Optional: Text hover effect */
.filter-text:hover {
  color: #0056b3;
}

	</style>
	</head>
	<body>
		
	<div class="colorlib-loader"></div>

	<div id="page">
		<%- include("../../views/partials/user/header.ejs")%>

		<div class="breadcrumbs">
			<div class="container">
				<div class="row">
					<div class="col">
						<p class="bread"><span><a href="http://localhost:4000">Home</a></span> / <span>Shop</span></p>
					</div>
				</div>
			</div>
		</div>


        <div class="colorlib-product">
			
			<div class="container">
				<button id="filter-btn">Apply Filters</button>

				
				<div class="filter-box" id="filterbox" style="display: none;">
					<div class="filter-item">
						<span class="filter-text">Categories</span>
						<div class="dropdown-content">
						  <a href="?category=skincare">Skincare</a>
						  <a href="?category=bodycare">Bodycare</a>
						  <a href="?category=makeup">Makeup</a>
						  <a href="?category=shampoo">Shampoo</a>
						  <a href="?category=serum">Serum</a>
						  <a href="?category=conditioner">Conditioner</a>
						</div>
					  </div>
					  
				  
					  <div class="filter-item">
						<span class="filter-text">Price</span>
						<div class="dropdown-content">
							<a href="?price=low-to-high">Low to High</a>
							<a href="?price=high-to-low">High to Low</a>
							<a href="?price=under-500">Under 500</a>
							<a href="?price=500-1000">500 - 1000</a>
							<a href="?price=1000-2000">1000 - 2000</a>
							<a href="?price=above-2000">Above 2000</a>
						</div>
					</div>
				  
					<div class="filter-item">
					  <span class="filter-text">New Arrivals</span>
					  <div class="dropdown-content">
						<a href="?newArrival=true">New Arrivals</a> 

						</div>
					  
					</div>
				  
					<div class="filter-item">
						<span class="filter-text">A-Z</span>
						<div class="dropdown-content">
						  <a href="?sort=name-asc">Aa - Zz</a> <!-- A to Z Sorting -->
						  <a href="?sort=name-desc">Zz - Aa</a> <!-- Z to A Sorting -->
						</div>
					  </div>
					  
				  </div>
					
				
				<div class="row">
					<div class="row row-pb-md">
						<% products.forEach(product => { %>
						<div class="col-md-3 col-lg-3 mb-4 text-center">
							<div class="product-entry border">
								<button class="wishlist-btn position-absolute" data-product-id="<%= product._id %>" onclick="addRemoveWishlist('<%= product._id %>', this)">
   									 <i class="fa fa-heart"></i>
                </button>
								<a href="/productdetails/<%= product._id %>" class="prod-img">
									<% if (product.productImage && product.productImage.length > 0) { %>
									<img src="/uploads/<%= product.productImage[0] %>" class="img-fluid" alt="Free html5 bootstrap 4 template">
									<% } else { %>
										<p>No Image</p>
										<% } %>
								</a>
								<div class="desc">
									<h2><a href="/productdetails/<%= product._id %>"><%=product.productName%></a></h2>
									<span class="price"> â‚¹<%=product.regularPrice%></span>
								</div>
							</div>
						</div>
	
						<% }); %>
			
							
							
							
							
							
						
							
						
						
						</div>
						
					</div>
					
				</div>
			</div>
		</div>

					<div class="col-md-12 text-center">
						<p><a href="#" class="btn btn-primary btn-lg">Shop All Products</a></p>
					</div>
				
			
		</div>


		
        <%- include("../../views/partials/user/footer.ejs")%>

	</div>

	<div class="gototop js-top">
		<a href="#" class="js-gotop"><i class="ion-ios-arrow-up"></i></a>
	</div>

	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

	<!-- <script>

		
		document.getElementById('applyFilter').addEventListener('click', function () {
  // Get all checked checkboxes
  const selectedCategories = Array.from(
    document.querySelectorAll('.category-checkbox:checked')
  ).map((checkbox) => checkbox.value.toLowerCase());

  // Check if any categories are selected
  if (selectedCategories.length === 0) {
    alert('Please select at least one category.');
    return;
  }

  // Create a URLSearchParams object to build the query string
  const params = new URLSearchParams();
  params.append('categories', selectedCategories.join(','));

  // Update the URL (e.g., navigate to `/shop/filter` with query params)
  const newUrl = `/shop/filter?${params.toString()}`;
  window.location.href = newUrl;
});


document.getElementById('applyPriceFilter').addEventListener('click', function () {
    // Collect selected price range values
    const selectedRanges = Array.from(
        document.querySelectorAll('input[type="checkbox"]:checked')
    ).map(checkbox => checkbox.value);

    if (selectedRanges.length === 0) {
        alert('Please select at least one price range.');
        return;
    }

    // Create a URLSearchParams object to build the query string
    const params = new URLSearchParams();
    
    // Pass the selected price ranges as a parameter
    params.append('priceRanges', selectedRanges.join(','));

    // Assuming categories filter is also part of the URL (you can modify based on your use case)
    const selectedCategories = Array.from(
        document.querySelectorAll('.category-checkbox:checked')
    ).map(checkbox => checkbox.value);
    
    if (selectedCategories.length > 0) {
        params.append('categories', selectedCategories.join(','));
    }

    // Update the URL with price ranges (and categories, if any)
    const newUrl = `/shop/filter?${params.toString()}`;
    window.location.href = newUrl;
});

// Function to handle sorting option changes
const handleSortChange = () => {
    const priceSort = document.querySelector('input[name="priceSort"]:checked');
    const productSort = document.querySelector('input[name="productSort"]:checked');

    // Initialize the URL parameters object
    const params = new URLSearchParams();

    // Add selected sorting options to URL parameters if available
    if (priceSort) {
        params.set('priceSort', priceSort.value); // For price sorting
    }
    if (productSort) {
        params.set('productSort', productSort.value); // For product sorting
    }

    // Build the new URL with the updated query string
    const newUrl = `/shop/filter?${params.toString()}`;
   const resultpath =  window.history.pushState({}, '', newUrl) // Update the browser URL without reloading the page
};

// Attach event listeners to all sorting options
document.querySelectorAll('input[name="priceSort"], input[name="productSort"]').forEach(input => {
    input.addEventListener('change', handleSortChange);
});


// async function addToWishlist(productId) {
//   try {
//      // Replace with your logged-in user's ID
//     const response = await fetch('/add-to-wishlist', {
//       method: 'POST',
//       headers: {
//         'Content-Type': 'application/json',
//       },
//       body: JSON.stringify({ productId }),
//     });

//     const result = await response.json();

//     if (response.ok) {
//       alert(result.message); // Display success message
//     } else {
//       alert(result.message); // Display error message
//     }
//   } catch (error) {
//     console.error('Error adding product to wishlist:', error);
//     alert('An error occurred while adding the product to your wishlist.');
//   }
// }

// async function addRemoveWishlist(productId, button) {
//     try {
//         const response = await fetch('/addRemove-wishlist', {
//             method: 'POST',
//             headers: { 'Content-Type': 'application/json' },
//             body: JSON.stringify({ productId }),
//         });

//         const result = await response.json();

//         if (response.ok) {
//             alert(result.message); // Success message
//             button.style.color = result.isInWishlist ? 'black' : 'red'; // Change color
//         } else {
//             alert(result.message); // Error message
//         }
//     } catch (error) {
//         console.error('Error updating wishlist:', error);
//         alert('An error occurred while updating the wishlist.');
//     }
// }


async function addRemoveWishlist(productId, button) {
    try {
        const response = await fetch('/addRemove-wishlist', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId }),
        });

        const result = await response.json();

        if (response.ok) {
            // Change button color
			const heartIcon = button.querySelector('.fa-heart');

// Change heart color based on wishlist status
heartIcon.style.color = result.isInWishlist ? 'black' : '#ff6b6b';
            // Show SweetAlert instead of alert
            Swal.fire({
                icon: 'success',
                title: result.isInWishlist ? 'Added to Wishlist!' : 'Removed from Wishlist!',
                text: result.message,
                showConfirmButton: false,
                timer: 1500 // Auto close after 1.5 seconds
            });

        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: result.message,
                showConfirmButton: true
            });
        }
    } catch (error) {
        console.error('Error updating wishlist:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'An error occurred while updating the wishlist.',
            showConfirmButton: true
        });
    }
}


	</script> -->
	
	<script>

    
async function addRemoveWishlist(productId, button) {
    try {
        const response = await fetch('/addRemove-wishlist', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId }),
        });

        const result = await response.json();

        if (response.ok) {
            // Change button color
			const heartIcon = button.querySelector('.fa-heart');

// Change heart color based on wishlist status
heartIcon.style.color = result.isInWishlist ? 'black' : '#ff6b6b';
            // Show SweetAlert instead of alert
            Swal.fire({
                icon: 'success',
                title: result.isInWishlist ? 'Added to Wishlist!' : 'Removed from Wishlist!',
                text: result.message,
                showConfirmButton: false,
                timer: 1500 // Auto close after 1.5 seconds
            });

        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: result.message,
                showConfirmButton: true
            });
        }
    } catch (error) {
        console.error('Error updating wishlist:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'An error occurred while updating the wishlist.',
            showConfirmButton: true
        });
    }
}
		const filterBox = document.getElementById('filterbox')
		document.getElementById('filter-btn').addEventListener('click',()=>{
			if(filterBox.style.display==='none'){
				filterBox.style.display='flex'
			}else{
				filterBox.style.display='none'
			}
		})

		function filterByCategory(category) {
  let url = window.location.pathname;
  if (category) {
    url += `?category=${category}`;
  }

  // Redirect the user to the filtered page
  window.location.href = url;
}

	</script>
	
	<!-- jQuery -->
	<script src="js/jquery.min.js"></script>
   <!-- popper -->
   <script src="js/popper.min.js"></script>
   <!-- bootstrap 4.1 -->
   <script src="js/bootstrap.min.js"></script>
   <!-- jQuery easing -->
   <script src="js/jquery.easing.1.3.js"></script>
	<!-- Waypoints -->
	<script src="js/jquery.waypoints.min.js"></script>
	<!-- Flexslider -->
	<script src="js/jquery.flexslider-min.js"></script>
	<!-- Owl carousel -->
	<script src="js/owl.carousel.min.js"></script>
	<!-- Magnific Popup -->
	<script src="js/jquery.magnific-popup.min.js"></script>
	<script src="js/magnific-popup-options.js"></script>
	<!-- Date Picker -->
	<script src="js/bootstrap-datepicker.js"></script>
	<!-- Stellar Parallax -->
	<script src="js/jquery.stellar.min.js"></script>
	<!-- Main -->
	<script src="js/main.js"></script>

	</body>
</html>