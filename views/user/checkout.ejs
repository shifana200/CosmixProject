<!DOCTYPE HTML>
<html>
	<head>
	<title>Cosmix website</title>
   <meta charset="utf-8">
   <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

	<link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,500,600,700" rel="stylesheet">
	<link href="https://fonts.googleapis.com/css?family=Rokkitt:100,300,400,700" rel="stylesheet">
	
	<!-- Animate.css -->
	<link rel="stylesheet" href="css/animate.css">
	<!-- Icomoon Icon Fonts-->
	<link rel="stylesheet" href="css/icomoon.css">
	<!-- Ion Icon Fonts-->
	<link rel="stylesheet" href="css/ionicons.min.css">
	<!-- Bootstrap  -->
	<link rel="stylesheet" href="css/bootstrap.min.css">

	<!-- Magnific Popup -->
	<link rel="stylesheet" href="css/magnific-popup.css">

	<!-- Flexslider  -->
	<link rel="stylesheet" href="css/flexslider.css">

	<!-- Owl Carousel -->
	<link rel="stylesheet" href="css/owl.carousel.min.css">
	<link rel="stylesheet" href="css/owl.theme.default.min.css">
	
	<!-- Date Picker -->
	<link rel="stylesheet" href="css/bootstrap-datepicker.css">
	<!-- Flaticons  -->
	<link rel="stylesheet" href="fonts/flaticon/font/flaticon.css">

	<!-- Theme style  -->
	<link rel="stylesheet" href="css/style.css">
	<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">


	</head>
	<style>
		#showaddAddress{
			background-color: #007bff; /* Blue background color */
  color: white; /* White text color */
  font-size: 16px; /* Font size */
  padding: 10px 20px; /* Padding: 10px top and bottom, 20px left and right */
  border: none; /* No border */
  border-radius: 5px; /* Rounded corners */
  cursor: pointer; /* Pointer cursor on hover */
  transition: background-color 0.3s ease, transform 0.2s ease;
		}

		/* General styling for the form container */
#addAddress {
  background-color: #F5F5F5;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  display: block; /* Ensure itâ€™s visible */
  width: 100%;
  max-width: 600px; /* Limit the width of the form */
  margin: 0 auto;
}

/* Form group styling */
.form-group {
  margin-bottom: 20px;
}

/* Label styling */
.form-group label {
  font-size: 16px;
  color: #333;
  margin-bottom: 8px;
  display: block;
}

/* Input fields styling */
.form-group input,
.form-group select {
  width: 100%;
  padding: 10px;
  font-size: 14px;
  border: 1px solid #ddd;
  border-radius: 4px;
  box-sizing: border-box;
}

/* Error message styling */
.error-message {
  color: #e74c3c;
  font-size: 12px;
  margin-top: 5px;
}

/* Button styling */
.add-address-btn {
  width: 30%;
  padding: 8px;
  background-color: #007bff; /* Blue background */
  color: white;
  font-size: 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin-top: 10px;

}

/* Hover effect for the button */
.add-address-btn:hover {
  background-color: #0056b3; /* Darker blue on hover */
}

/* #editAddress{
	display: none;
} */

	</style>
	<body>
		
	<div class="colorlib-loader"></div>

	<div id="page">
		<%- include("../../views/partials/user/header.ejs")%>

		<div class="breadcrumbs">
			<div class="container">
				<div class="row">
					<div class="col">
						<p class="bread"><span><a href="/">Home</a></span> / <span>Checkout</span></p>
					</div>
				</div>
			</div>
		</div>


		<div class="colorlib-product">
			<div class="container">
				<div class="row row-pb-lg">
					<div class="col-sm-10 offset-md-1">
						<div class="process-wrap">
							<div class="process text-center active">
								<a href="/cart">
									<p><span>01</span></p>
								<h3>Shopping Cart</h3>
								</a>
								
							</div>
							<div class="process text-center active">
								<p><span>02</span></p>
								<h3>Checkout</h3>
							</div>
							<div class="process text-center">
								<p><span>03</span></p>
								<h3>Order Complete</h3>
							</div>
						</div>
					</div>
				</div>
				<div class="row">
					<div class="col-lg-8" style="background-color: #FFFFFF;" id="addressdiv">
						
						<div id="address-list" style="background-color: #F5F5F4; ">

							<div class="address-card">
								<% if (userAddress.address.length>0) {%>
									<% 
									const defaultAddress = userAddress.address.find(address => address.isDefault === true);
						
									const addressToDisplay = defaultAddress || userAddress.address[0];
								 %>

								<div class="address-content"  style="padding: 20px;">


									
									<div class="radio-section" style="display: flex; align-items: center; justify-content: space-between; padding: 10px;">
										<!-- Left side: Radio button and h6 -->
										<div style="display: flex; align-items: center; gap: 5px;">
											<h6 style="background-color: #47abb8; color: #fff; margin: 0; padding: 5px 10px; border-radius: 4px;"><%= addressToDisplay.addressType %></h6>
										</div>
										
										
									</div>
									<input type="hidden" value="<%=addressToDisplay._id%> " id="selectedAddress">
							
									<strong><%=addressToDisplay.name%></strong>
									<p>Phone:<%=addressToDisplay.phone%> <br/>
									Alt Phone : <%=addressToDisplay.altPhone%></p>
									<p><%=addressToDisplay.city%>,<%=addressToDisplay.landMark%>,<br/>
										 <%=addressToDisplay.district%>, <%=addressToDisplay.state%> - <strong><%=addressToDisplay.pincode%></strong></p>
								</div>
								<%} else {%>
									<h6>No Address Available</h6>
									<%}%>
							</div>
							
						</div>
						
							<button type="submit" class="add-address-btn" id="showaddAddress">Add  New Address</button> 
							<button type="submit" class="add-address-btn" id="edit-Address">Edit Address</button>

							

					</div>
					<div class="col-lg-8" style="background-color: #F5F5F5; display: none;" id="addAddress">

						<form action="/addaddress" method="POST" id="addressForm">
							<h6>Add New Address</h6>

							<div class="form-group">
								<label for="name">Name</label>
								<input type="text" id="name" placeholder="Enter your name"  name="name" />
								<div class="error-message" id="nameError"></div>
							</div>
							<div class="form-group">
								<label for="phone">Phone Number</label>
								<input type="tel" id="phone" placeholder="Enter your phone number" name="phone" />
								<div class="error-message" id="phoneError"></div>
							</div>
							<div class="form-group">
							   <label for="altPhone">Alternative Phone Number</label>
							   <input type="tel" id="altPhone" placeholder="Enter your phone number" name="altPhone"/>
							   <div class="error-message" id="altPhoneError"></div>
						   </div>
						   <div class="form-group">
							<label for="addressType">Address Type</label>
							<select id="addressType" name="addressType">
								<option value="HOME">HOME</option>
								<option value="OFFICE">OFFICE</option>
							</select>
							<div class="error-message" id="addressError"></div>
						</div>
						 <div class="form-group">
							 <label for="landMark">Land mark</label>
							 <input type="text" id="landmark" placeholder="Enter your landmark" name="landMark"/>
							 <div class="error-message" id="landmarkError"></div>
						 </div>
						 <div class="form-group">
							<label for="city">City</label>
							<input type="text" id="city" placeholder="Enter your city" name="city" />
							<div class="error-message" id="cityError"></div>
						</div>
						<div class="form-group">
							<label for="district">District</label>
							<input type="text" id="district" placeholder="Enter your district" name="district" />
							<div class="error-message" id="districtError"></div>
						</div>
						<div class="form-group">
							<label for="state">State</label>
							<input type="text" id="state" placeholder="Enter your state" name="state"/>
							<div class="error-message" id="stateError"></div>
						</div>
						<div class="form-group">
							<label for="pincode">Pincode</label>
							<input type="text" id="pincode" placeholder="Enter your pincode" name="pincode" />
							<div class="error-message" id="pincodeError"></div>
						</div>
						<div style="display: flex; gap: 73px;">
							<input type="hidden" name="source" value="checkout">

						<button type="submit" class="add-address-btn">Add Address</button>
						<button type="button" class="add-address-btn" id="cancel">Cancel</button>
					</div>
						</form>
						
					</div>

					<div class="col-lg-8" style="background-color: #F5F5F5; display: none;" id="editAddress">

						<form id="addressForm" method="post">

						<% if (userAddress.address.length>0) {%>
							<% userAddress.address.forEach(address=>{ %>

							<div class="address-content"  style="padding: 20px;">


								
								<div class="radio-section" style="display: flex; align-items: center; justify-content: space-between; padding: 10px;">
									<!-- Left side: Radio button and h6 -->
									<div style="display: flex; align-items: center; gap: 5px;">
										<input type="radio" name="address" class="address-radio" data-id="<%= address._id %>" id="address<%= address._id %>">

													<h6 style="background-color: #47abb8; color: #fff; margin: 0; padding: 5px 10px; border-radius: 4px;"><%=address.addressType%></h6>
									</div>
									
								
								</div>
								
						
								<strong><%=address.name%></strong>
								<p>Phone:<%=address.phone%> <br/>
								Alt Phone : <%=address.altPhone%></p>
								<p><%=address.city%>,<%=userAddress.address.landMark%>,<br/>
									 <%=address.district%>, <%=address.state%> - <strong><%=address.pincode%></strong></p>
							</div>
							<%})%>
							<%}%>
							<button type="submit" class="add-address-btn" id="updateAddressBtn">Update Address</button>
						<button type="button" class="add-address-btn" id="cancelEdit">Cancel</button>

					</div>
				</form>

					<div class="col-lg-4">
						<div class="row">
							<div class="col-md-12">
								<div class="cart-detail">
									<h2>Cart Total</h2>
									<ul>
										
										<li>
											<ul>
												<% if (cart && cart.items.length > 0) { %>
													<% cart.items.forEach(item => { %>
												<li><span><%= item.quantity%> x <%= item.productId.productName%></span> <span> â‚¹ <%=item.totalPrice%></span></li>
												<%})%>
												<%}%>

												
											</ul>
										</li>
										<li><span>Subtotal</span> <span>â‚¹<%=subtotal%></span></li>
										<li><span>Shipping</span> <span>â‚¹<%=additionalCharge%></span></li>
                                        <li><span>Discount</span> <span>â‚¹<%=discount%></span></li>

										<li><span>Order Total</span> <span>â‚¹<%=totalAmount.toFixed(2)%><span></li>
									</ul>
								</div>
						   </div>

						   <div class="w-100"></div>

							<input type="hidden" id="cartId" name="cartId" value="<%= cart._id %>" />

  
  
						   <div class="col-md-12">
							<form method="POST" id="order-form">

								<div class="cart-detail">
									<h2>Payment Method</h2>
									
									<ul>
										<li> <label>
                                            <input type="radio" name="paymentMethod" value="COD" required 
                                                <%= totalAmount > 1000 ? 'disabled' : '' %> />
                                            Cash on Delivery
                                        </label></li>
										<li>
                                            <label ><input type="radio" name="paymentMethod" value="Online" required/>  Online Payement (via Razorpay)</label>
                                        </li>
                                        <li>
                                            <label>
                                                <input type="radio" name="paymentMethod" value="Wallet" required />  
                                                Pay via Wallet
                                            </label>
                                            </li>	
									</ul>
								</div>
							</div>
							<div class="row">
								<div class="col-md-12 text-center">
									<button type="submit" class="btn btn-primary" id="payButton" style="border: none;">Place an order</button>
								</div>
							</div>
						</form>
						</div>
						
					</div>
				</div>
			</div>
		</div>
        <%- include("../../views/partials/user/footer.ejs")%>

	</div>

	<div class="gototop js-top">
		<a href="#" class="js-gotop"><i class="ion-ios-arrow-up"></i></a>
	</div>

	
	<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


	 
	<script>
		document.addEventListener("DOMContentLoaded", function() {

const addressDiv = document.getElementById('addressdiv');
const addAddressDiv = document.getElementById('addAddress');
const editAddressDiv = document.getElementById('editAddress');
const showAddAddressBtn = document.getElementById('showaddAddress');
const editAddressBtn = document.getElementById('edit-Address');
const cancelBtn = document.getElementById('cancel');
const cancelEditBtn = document.getElementById('cancelEdit');
const updateAddressBtn = document.getElementById('updateAddressBtn');
const addressForm = document.getElementById('addressForm');


showAddAddressBtn.addEventListener('click', function() {
    addressDiv.style.display = 'none';  // Hide address list
    addAddressDiv.style.display = 'block';  // Show Add Address form
});

// Show the "Edit Address" form
editAddressBtn.addEventListener('click', function() {
    addressDiv.style.display = 'none';  // Hide address list
    editAddressDiv.style.display = 'block';  // Show Edit Address form
});

// Cancel button in "Add Address" form
cancelBtn.addEventListener('click', function() {
    addAddressDiv.style.display = 'none';  // Hide Add Address form
    addressDiv.style.display = 'block';  // Show address list
});

// Cancel button in "Edit Address" form
cancelEditBtn.addEventListener('click', function() {
    editAddressDiv.style.display = 'none';  // Hide Edit Address form
    addressDiv.style.display = 'block';  // Show address list
});

let selectedAddressId= null;

document.querySelectorAll('.address-radio').forEach((radio)=>{
	radio.addEventListener('change',(e)=>{
		selectedAddressId=e.target.getAttribute('data-id');
		console.log("selected address" ,selectedAddressId)
	})
})





document.getElementById("updateAddressBtn").addEventListener("click", async function (event) {
    event.preventDefault();

    const selectedAddress = document.querySelector('input[name="address"]:checked');

    if (!selectedAddress) {
        Swal.fire({
            icon: "warning",
            title: "No Address Selected",
            text: "Please select an address before updating.",
        });
        return;
    }

    const selectedAddressId = selectedAddress.getAttribute("data-id");

    try {
        const response = await fetch("/updateAddress", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ selectedAddressId }),
        });

        const result = await response.json();

        if (result.success) {
            Swal.fire({
                icon: "success",
                title: "Success!",
                text: "Address updated successfully.",
                timer: 1500,
                showConfirmButton: false,
            }).then(() => {
                // Hide editAddressDiv and show addressDiv
                editAddressDiv.style.display = "none";
                addressDiv.style.display = "block";
				location.reload();
            });
        } else {
            Swal.fire({
                icon: "error",
                title: "Update Failed",
                text: "Failed to update the address. Please try again.",
            });
        }
    } catch (error) {
        console.error("Error updating address:", error);
        Swal.fire({
            icon: "error",
            title: "Error!",
            text: "Something went wrong. Please try again later.",
        });
    }
});



  // Event listener for the cancel button
  cancelEditBtn.addEventListener('click', function() {
    // Hide the edit address section
    editAddressDiv.style.display = 'none';
  });

		})




document.getElementById("order-form").addEventListener("submit",async function (event) {
    event.preventDefault(); // Prevent default form submission

    const cartId = document.getElementById("cartId").value;
    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
    const selectedAddress = document.getElementById('selectedAddress').value.trim();

    console.log("Selected Address:", selectedAddress);
    console.log("Payment Method:", paymentMethod);

    if (paymentMethod === "COD") {
        placeOrder(cartId, selectedAddress);
    } else if (paymentMethod === "Online") {
        createOrder(cartId,selectedAddress);
    }else if (paymentMethod === "Wallet") {
        processWalletPayment(cartId, selectedAddress);
    }
});


const placeOrder = async (cartId, selectedAddress) => {
    try {
        console.log("Sending Order Request...");
        const response = await fetch("/placeOrder", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ cartId, paymentMethod: "COD", selectedAddress }),
        });

        console.log("Response:", response);

        if (response.ok) {
            const result = await response.json();
            console.log("Result:", result);

            if (result.success) {
                // SweetAlert for success with just the icon and message
                Swal.fire({
                    icon: 'success',
                    text: `Your order ID is: ${result.orderId}`,
                    showConfirmButton: false, // No button
                    timer: 1500, // Close after 1.5 seconds
                }).then(() => {
                    window.location.href = `/ordercomplete?orderId=${result.orderId}`;
                });
            } else {
                // SweetAlert for failure with just the icon and message
                Swal.fire({
                    icon: 'error',
                    text: result.message,
                    showConfirmButton: false, // No button
                    timer: 1500, // Close after 1.5 seconds
                });
            }
        } else {
            // SweetAlert for server error with just the icon and message
            const errorText = await response.text();
            console.error("Server Error:", errorText);
            Swal.fire({
                icon: 'error',
                text: `An error occurred: ${errorText}`,
                showConfirmButton: false, // No button
                timer: 1500, // Close after 1.5 seconds
            });
        }
    } catch (error) {
        console.error("Error placing order:", error);
        // SweetAlert for catch block errors with just the icon and message
        Swal.fire({
            icon: 'error',
            text: 'An error occurred while placing the order.',
            showConfirmButton: false, // No button
            timer: 1500, // Close after 1.5 seconds
        });
    }
};



const createOrder = async (cartId, selectedAddress) => {
    try {
        const response = await fetch("/createOrder", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ cartId, selectedAddress, paymentMethod: "Online Payment" }),
        });

        const order = await response.json();
        console.log("Order Response:", order); // Debugging

        if (!order.id) {
            Swal.fire({ icon: 'error', text: "Failed to create Razorpay order", timer: 1500, showConfirmButton: false });
            return;
        }

        // Initialize Razorpay Payment
        const options = {
            key: "rzp_test_UPsueP9qLBJXHk", // Your Razorpay Key ID
            amount: order.amount, // Amount in paise
            currency: "INR",
            name: "Your Store",
            description: "Purchase Order",
            order_id: order.id, // Razorpay Order ID
            handler: async function (response) {
                console.log("Payment Response:", response); // Debugging
                await verifyPayment(response, cartId);
            },
        };

        const rzp = new Razorpay(options);
        rzp.open();
    } catch (error) {
        console.error("Error creating Razorpay order:", error);
    }
};


const verifyPayment = async (paymentData, cartId) => {
    try {
        const response = await fetch("/verifyPayment", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ paymentData, cartId }),
        });

        const result = await response.json();
        console.log("Verify Payment Response:", result); // Debugging

        if (result.success) {
            Swal.fire({
                icon: "success",
                text: "Payment successful! Redirecting...",
                showConfirmButton: false,
                timer: 1500
            })
            window.location.href = `/ordercomplete?orderId=${result.orderId}`;
            
        } else {
            Swal.fire({ icon: "error", text: "Payment verification failed.", showConfirmButton: false, timer: 1500 })
            
                window.location.href = '/failedPayment';
            
        }
    } catch (error) {
        console.error("Error verifying payment:", error);
        Swal.fire({ icon: "error", text: "An error occurred while verifying the payment.", showConfirmButton: false, timer: 1500 });
    }
};


const processWalletPayment = async (cartId, selectedAddress) => {
    try {
        const response = await fetch("/payWithWallet", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ cartId, selectedAddress }),
        });

        const result = await response.json();
        if (result.success) {
            Swal.fire({
                icon: "success",
                text: `Wallet Payment Successful! Your order ID is: ${result.orderId}`,
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.href = `/ordercomplete?orderId=${result.orderId}`;
            });
        } else {
            Swal.fire({
                icon: "error",
                text: result.message,
                showConfirmButton: false,
                timer: 1500
            });
        }
    } catch (error) {
        console.error("Error processing wallet payment:", error);
        Swal.fire({ icon: "error", text: "An error occurred while processing wallet payment.", showConfirmButton: false, timer: 1500 });
    }
};



	</script>



	<!-- jQuery -->
	<script src="js/jquery.min.js"></script>
   <!-- popper -->
   <script src="js/popper.min.js"></script>
   <!-- bootstrap 4.1 -->
   <script src="js/bootstrap.min.js"></script>
   <!-- jQuery easing -->
   <script src="js/jquery.easing.1.3.js"></script>
	<!-- Waypoints -->
	<script src="js/jquery.waypoints.min.js"></script>
	<!-- Flexslider -->
	<script src="js/jquery.flexslider-min.js"></script>
	<!-- Owl carousel -->
	<script src="js/owl.carousel.min.js"></script>
	<!-- Magnific Popup -->
	<script src="js/jquery.magnific-popup.min.js"></script>
	<script src="js/magnific-popup-options.js"></script>
	<!-- Date Picker -->
	<script src="js/bootstrap-datepicker.js"></script>
	<!-- Stellar Parallax -->
	<script src="js/jquery.stellar.min.js"></script>
	<!-- Main -->
	<script src="js/main.js"></script>

	</body>
</html>

