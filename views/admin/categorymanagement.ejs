<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/style.css">
    <title>Admin Panel</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }
        body {
            display: flex;
            background-color: #f5f5f5;
        }

        /* Sidebar */
        .sidebar {
            width: 220px;
            background-color: #fff;
            height: 100vh;
            padding: 20px;
            box-shadow: 2px 0px 5px rgba(0,0,0,0.1);
        }
        .sidebar h1 {
            color: #84CBCB;
            margin-bottom: 20px;
            font-size: 24px;
        }
        .sidebar ul {
            list-style-type: none;
        }
        .sidebar ul li {
            margin: 15px 0;
            cursor: pointer;
            color: #333;
        }
        .sidebar ul li:hover {
            color: #84CBCB;
        }

        /* Main Content */
        .main {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        /* Top Header */
        .header {
            background-color: #84CBCB;
            height: 50px;
            display: flex;
            align-items: center;
            padding-left: 20px;
            color: white;
            font-size: 18px;
        }

        /* Table Section */
        .content {
            display: flex;
            flex: 1;
        }
        .table-container {
            flex: 2;
            padding: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
            box-shadow: 0px 2px 5px rgba(0,0,0,0.1);
        }
        th, td {
            padding: 10px;
            border-bottom: 1px solid #ccc;
            text-align: center;
        }
        th {
            background-color: #f0f0f0;
        }


        .btn-list {
            padding: 5px 10px;
            background-color: #5cb85c;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 4px;
        }

        .btn-unlist {
            padding: 5px 20px;
            background-color: #ff0202;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 4px;
        }

        .btn-update {
            padding: 5px 10px;
            background-color: #5cb85c;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 4px;
        }
      
        
        .btn-update:hover, .btn-ban:hover {
            opacity: 0.8;
        }

       

        .pagination {
    display: flex; /* Arrange the items horizontally */
    list-style-type: none; /* Remove the bullets */
    padding: 15px; /* Remove default padding */
    margin: 0; /* Remove default margin */
}

.pagination .page-item {
    margin: 0 5px; /* Add some spacing between items */
}

.pagination .page-link {
    display: block;
    padding: 8px 12px;
    text-decoration: none; /* Remove underline */
    color: #007bff; /* Link color */
    border: 1px solid #dee2e6; /* Add border */
    border-radius: 4px; /* Slightly rounded corners */
    background-color: #fff; /* White background */
}

.pagination .page-item.active .page-link {
    background-color: #007bff; /* Highlight active item */
    color: white; /* White text for active item */
    border-color: #007bff; /* Border same as background */
}

.pagination .page-link:hover {
    background-color: #0056b3; /* Darker blue on hover */
    color: white;
    text-decoration: none; /* Keep no underline */
}




.btn-blue:hover {
  background-color: #0056b3; /* Darker blue when hovering */
}


        /* Form Section */
        .form-container {
            background-color: #84CBCB;
            padding: 20px;
            width: 300px;
        }
        .form-container h3 {
            color: #fff;
            margin-bottom: 10px;
        }
        .form-container input {
            width: 100%;
            margin: 10px 0;
            padding: 8px;
            border: none;
            border-radius: 4px;
        }
        .form-container .create-btn {
            width: 100%;
            padding: 10px;
            background-color: #007BFF;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 4px;
            text-align: center;
        }
        .form-container .create-btn:hover {
            background-color: #0056b3;
        }

        /* Modal styling */
        .modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    background-color: rgba(0, 0, 0, 0.5); /* Black with transparency */
    overflow: auto; /* Enable scroll if needed */
    padding-top: 60px;
}

.modal-content {
    background-color: white;
    margin: 5% auto;
    padding: 30px;
    border-radius: 8px;
    width: 90%;
    max-width: 500px; /* Optional: max width for large screens */
    display: flex;
    flex-direction: column; /* Stack content vertically */
    gap: 10px; /* Adds spacing between the elements */
}

.modal-content h2 {
    text-align: center; /* Center the title */
    font-size: 1.5em;
    color: #333; /* Darker text for readability */
    margin-bottom: 20px;
}

input {
    padding: 10px;
    font-size: 1em;
    border-radius: 6px;
    border: 1px solid #ccc;
    width: 100%; /* Full width of the modal */
    box-sizing: border-box; /* Include padding in the width calculation */
    background-color: #f9f9f9; /* Light background for inputs */
}

input:focus {
    outline: none;
    border-color: #007BFF; /* Blue outline on focus */
    background-color: #fff;
}

button.update-btn {
    background-color: #28a745; /* Green color for the update button */
    color: rgb(255, 255, 255);
    padding: 12px 20px;
    font-size: 1.1em;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    align-self: center; /* Center the button */
}
.form-group label {
    padding-bottom: 10px;
}

button.update-btn:hover {
    background-color: #218838; /* Darker green on hover */
}

button.updatebtn:active {
    background-color: #1e7e34; /* Even darker green on click */
}

.close {
    color: #aaa;
    font-size: 1.5em;
    font-weight: bold;
    cursor: pointer;
    position: absolute;
    top: 15px;
    right: 20px;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
}

    </style>
</head>
<body>
   

    
    <div class="main">
      <%- include("../../views/partials/admin/header.ejs")%>

    
        <div class="content">
            <!-- Table -->
            <div class="table-container">
                <div style="display: flex; gap: 10px; margin-bottom: 10px;">
                  <input type="text" placeholder="Search categories" 
                      style="flex: 1; padding: 8px; border-radius: 4px; border: 1px solid #ccc;">
                  <button style="background-color: blue; color: white; padding: 8px 12px; border: none; border-radius: 4px; cursor: pointer;">
                      Search
                  </button>
              </div>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Status</th>
                            <th>List/Unlist</th>
                            <th>Update</th>
                            
                            

                            
                            
                        </tr>
                    </thead>
                    <tbody>
                        <% cat.reverse().forEach((category, index) => { %>
                          <tr>
                            <td><%= category.name %></td>
                            <td><%= category.description %></td>
                      
                            <% if (category.isListed) { %>
                              <td>Listed</td>
                            <% } else { %>
                              <td>Unlisted</td>
                            <% } %>
                      
                            <% if (category.isListed) { %>
                              <td>
                                <button class="btn-unlist" onclick="confirmAction('/admin/listCategory?id=<%= category._id %>', 'Unlist this category?')">
                                    Unlist
                                  </button>

                              </td>
                            <% } else { %>
                              <td>
                                <button class="btn-list" onclick="confirmAction('/admin/unlistCategory?id=<%= category._id %>', 'List this category?')">
                                    List
                                  </button>
                              </td>
                            <% } %>
                      
                            <td>
                                <button class="btn-update" onclick="openUpdateCategoryModal('<%= category._id %>', '<%= category.name %>', '<%= category.description %>')">Update</button>
                              </td>
                              
                            
                            
                          </tr>
                        <% }) %>
                      </tbody>
                      
                </table>
                <div class="container mt-3">
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content center mb-20" style="margin-right:200px">
                            <%for(let i=1;i<=totalPages;i++){%>
                                <li class="page-item <%=(i===currentPage) ? 'active' : ''%>">
                                    <a class="page-link" href="?page=<%=i%>"><%= i %></a>
                                </li>
                            <%}%>
                        </ul>
                    </nav>
                </div>
            </div>
            <div>
              <button id="addCategorybtn" style="background-color: #1e7e34; border-radius: 5px; border: none; color: white; padding: 8px; margin-top: 20px;">Add Category</button>
            </div>
            <!-- Form  to add new category-->
             <form method="POST" action="/admin/addCategory" onsubmit="return handleAddCategoryFormSubmit(event)" id="addCategoryform" style="display: none;">
            <div class="form-container">
                <h3>Add new category</h3>
                <input type="text" placeholder="name" name="name" id="nameId">
                <span id="nameError" class="error-message" style="color: red; display: none;"></span>
                
                <input type="text" placeholder="description" name="description" id="descriptionId">
                <span id="descriptionError" class="error-message" style="color: red; display: none;"></span>
                
                

                <button  type="submit"  class="create-btn">Create</button>
            </div>
        </form>
       
        </div>


<!-- Modal for Updating Category  -->
<div class="modal" id="updateCategoryModal">
    <div class="modal-content">
        <span class="close" id="closeModal">&times;</span>
        <h2>Update Category</h2>
        <form id="updateCategoryForm" method="POST" action="/admin/updateCategory">

            <input type="hidden" name="categoryId" id="categoryId">
            
            <div class="form-group">
                <label for="categoryName">Category Name:</label>
                <input type="text" id="categoryName" name="name" placeholder="Enter category name" >
                <span id="updateNameError" class="error-message" style="color: red; display: none;"></span>

            </div>
            
            <div class="form-group">
                <label for="categoryDescription">Category Description:</label>
                <input type="text" id="categoryDescription" name="description" placeholder="Enter category description"></input>
                <span id="updateDescriptionError" class="error-message" style="color: red; display: none;"></span>

            </div>
            
            <button type="submit" id="updateCategoryBtn">Update Category</button>
        </form>
    </div>
</div>

 

    </div>
    <!-- SweetAlert CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- <script>


function confirmAction(url, message) {
    Swal.fire({
      title: 'Are you sure?',
      text: message,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, proceed!',
      cancelButtonText: 'Cancel',
    }).then((result) => {
      if (result.isConfirmed) {
        // Redirect to the URL if confirmed
        window.location.href = url;
      }
    });
  }


    document.getElementById("addCategorybtn").addEventListener("click", function() {
        var form = document.getElementById("addCategoryform");
        if (form.style.display === "none" || form.style.display === "") {
            form.style.display = "block";
            document.getElementById("addCategorybtn").style.display = "none"
        } 
    });

   



// Make sure there's only one handleFormSubmit function
function handleFormSubmit(event) {
    event.preventDefault();

    if (!validateForm()) {
        return;
    }

    const name = document.getElementsById("nameId")[0].value;
    const description = document.getElementById("descriptionId").value;

    fetch('/admin/addCategory', {
        method: 'POST',
        headers: {
            'content-type': 'application/json'
        },
        body: JSON.stringify({ name, description })
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => {
                throw new Error(err.error);
            });
        }
        return response.json();
    })
    .then(data => {
        Swal.fire({
            icon: "success",
            title: "Success",
            text: "Category Added successfully",
            showConfirmButton: false,
            timer: 1500
        });
        setTimeout(() => {
            location.reload();
        }, 1500);
    })
    .catch(error => {
        if (error.message === "Category already exists") {
            Swal.fire({
                icon: "error",
                title: "Oops",
                text: "Category already exists"
            });
        } else {
            Swal.fire({
                icon: "error",
                title: "Oops",
                text: "An error occurred while adding the category"
            });
        }
    });
}

// Corrected validateForm function with trim() fix
function validateForm() {
    clearErrorMessages();
    const name = document.getElementsById("nameId")[0].value.trim();
    const description = document.getElementById('descriptionId').value.trim();
    let isValid = true;

    if (name === "") {
        displayErrorMessage("name.error", "Please enter a name");
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        displayErrorMessage(
            "name.error",
            "Category name should contain only alphabetic characters"
        );
        isValid = false;
    }
    if (description === "") {
        displayErrorMessage("description.error", "Please enter a description");
        isValid = false;
    }
    return isValid;
}

function displayErrorMessage(elementId, message) {
    var errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = "block";
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName("error.message");
    Array.from(errorElements).forEach((element) => {
        element.innerText = "";
        element.style.display = "none";
    });
}




    const modal = document.getElementById('updateCategoryModal');
    const closeModalButton = document.getElementById('closeModal');
    const updateCategoryForm = document.getElementById('updateCategoryForm');

    // Function to open the modal and pre-fill the fields
    function openUpdateCategoryModal(categoryId, name, description) {
        document.getElementById('categoryId').value = categoryId;
        document.getElementById('categoryName').value = name;
        document.getElementById('categoryDescription').value = description;
        modal.style.display = 'block';
    }

    // Close the modal
    closeModalButton.onclick = function() {
        modal.style.display = 'none';
    }

    window.onclick = function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    }

    // Validate form inputs
    function validateForm() {
        clearErrorMessages();
        const name = document.getElementById("categoryName").value.trim();
        const description = document.getElementById("categoryDescription").value.trim();
        let isValid = true;

        if (name === "") {
            displayErrorMessage("name.error", "Please enter a name");
            isValid = false;
        } else if (!/^[a-zA-Z\s]+$/.test(name)) {
            displayErrorMessage("name.error", "Category name should contain only alphabetic characters");
            isValid = false;
        }

        if (description === "") {
            displayErrorMessage("description.error", "Please enter a description");
            isValid = false;
        }

        return isValid;
    }

    // Handle form submission
    updateCategoryForm.onsubmit = function(event) {
        event.preventDefault();

        if (!validateForm()) {
            return;
        }

        const categoryId = document.getElementById('categoryId').value.trim();
        const name = document.getElementById('categoryName').value.trim();
        const description = document.getElementById('categoryDescription').value.trim();

        // Send data to the server for updating the category
        fetch('/admin/updateCategory', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                categoryId,
                name,
                description,
            }),
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(data => {
                    throw new Error(data.message || 'Error updating category');
                });
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Show success message and reload
                Swal.fire({
                    icon: "success",
                    title: "Success",
                    text: "Category updated successfully",
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    modal.style.display = 'none';
                    location.reload(); // Reload the page to reflect changes
                });
            } else {
                // Show an error if the server indicates failure
                Swal.fire({
                    icon: "error",
                    title: "Oops",
                    text: data.message || "An error occurred while updating the category",
                });
            }
        })
        .catch(error => {
            // Handle errors like duplicate category
            if (error.message === "Category already exists") {
                Swal.fire({
                    icon: "error",
                    title: "Oops",
                    text: "Category already exists",
                });
            } else {
                Swal.fire({
                    icon: "error",
                    title: "Oops",
                    text: error.message || "An error occurred while updating the category",
                });
            }
        });
    };

    // Helper function to display error messages
    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }

    // Helper function to clear error messages
    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName("error message");
        Array.from(errorElements).forEach((element) => {
            element.innerText = "";
            element.style.display = "none";
        });
    }
</script> -->


<script>
    // Function to confirm actions with SweetAlert
    function confirmAction(url, message) {
        Swal.fire({
            title: 'Are you sure?',
            text: message,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, proceed!',
            cancelButtonText: 'Cancel',
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = url;
            }
        });
    }
    
    // Toggle Add Category Form
    document.getElementById("addCategorybtn").addEventListener("click", function () {
        const form = document.getElementById("addCategoryform");
        form.style.display = form.style.display === "none" || form.style.display === "" ? "block" : "none";
        this.style.display = "none";
    });
    
    // Clear Error Messages
    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName("error-message");
        Array.from(errorElements).forEach((element) => {
            element.innerText = "";
            element.style.display = "none";
        });
    }
    
    // Display Error Message
    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }
    
    // Validate Add Category Form
    function validateAddCategoryForm() {
        clearErrorMessages();
        const name = document.getElementById("nameId").value.trim();
        const description = document.getElementById("descriptionId").value.trim();
        let isValid = true;
    
        if (!name) {
            displayErrorMessage("nameError", "Please enter a name");
            isValid = false;
        } else if (!/^[a-zA-Z\s]+$/.test(name)) {
            displayErrorMessage("nameError", "Category name should contain only alphabetic characters");
            isValid = false;
        }
    
        if (!description) {
            displayErrorMessage("descriptionError", "Please enter a description");
            isValid = false;
        }
    
        return isValid;
    }
    
    // Handle Add Category Form Submission
    function handleAddCategoryFormSubmit(event) {
        event.preventDefault();
    
        if (!validateAddCategoryForm()) {
            return;
        }
    
        const name = document.getElementById("nameId").value;
        const description = document.getElementById("descriptionId").value;
    
        fetch('/admin/addCategory', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name, description }),
        })
            .then((response) => {
                if (!response.ok) {
                    return response.json().then((err) => {
                        throw new Error(err.error);
                    });
                }
                return response.json();
            })
            .then(() => {
                Swal.fire({
                    icon: "success",
                    title: "Success",
                    text: "Category added successfully",
                    showConfirmButton: false,
                    timer: 1500,
                });
                setTimeout(() => location.reload(), 1500);
            })
            .catch((error) => {
                Swal.fire({
                    icon: "error",
                    title: "Oops",
                    text: error.message || "An error occurred while adding the category",
                });
            });
    }
    
    // Open Update Category Modal
    function openUpdateCategoryModal(categoryId, name, description) {
        document.getElementById('categoryId').value = categoryId;
        document.getElementById('categoryName').value = name;
        document.getElementById('categoryDescription').value = description;
        document.getElementById('updateCategoryModal').style.display = 'block';
    }
    
    // Close Update Category Modal
    document.getElementById('closeModal').onclick = function () {
        document.getElementById('updateCategoryModal').style.display = 'none';
    };
    
    window.onclick = function (event) {
        if (event.target === document.getElementById('updateCategoryModal')) {
            document.getElementById('updateCategoryModal').style.display = 'none';
        }
    };
    
    // Validate Update Category Form
    function validateUpdateCategoryForm() {
        clearErrorMessages();
        const name = document.getElementById("categoryName").value.trim();
        const description = document.getElementById("categoryDescription").value.trim();
        let isValid = true;
    
        if (!name) {
            displayErrorMessage("updateNameError", "Please enter a name");
            isValid = false;
        } else if (!/^[a-zA-Z\s]+$/.test(name)) {
            displayErrorMessage("updateNameError", "Category name should contain only alphabetic characters");
            isValid = false;
        }
    
        if (!description) {
            displayErrorMessage("updateDescriptionError", "Please enter a description");
            isValid = false;
        }
    
        return isValid;
    }
    
    // Handle Update Category Form Submission
    document.getElementById('updateCategoryForm').onsubmit = function (event) {
        event.preventDefault();
    
        if (!validateUpdateCategoryForm()) {
            return;
        }
    
        const categoryId = document.getElementById('categoryId').value.trim();
        const name = document.getElementById('categoryName').value.trim();
        const description = document.getElementById('categoryDescription').value.trim();
    
        fetch('/admin/updateCategory', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ categoryId, name, description }),
        })
            .then((response) => {
                if (!response.ok) {
                    return response.json().then((data) => {
                        throw new Error(data.message || 'Error updating category');
                    });
                }
                return response.json();
            })
            .then(() => {
                Swal.fire({
                    icon: "success",
                    title: "Success",
                    text: "Category updated successfully",
                    showConfirmButton: false,
                    timer: 1500,
                });
                setTimeout(() => location.reload(), 1500);
            })
            .catch((error) => {
                Swal.fire({
                    icon: "error",
                    title: "Oops",
                    text: error.message || "An error occurred while updating the category",
                });
            });
    };
    </script>


</body>
</html>
