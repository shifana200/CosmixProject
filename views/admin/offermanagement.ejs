<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/style.css">
    <title>Admin Panel</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }
        body {
            display: flex;
            background-color: #f5f5f5;
        }

        /* Sidebar */
        .sidebar {
            width: 220px;
            background-color: #fff;
            height: 100vh;
            padding: 20px;
            box-shadow: 2px 0px 5px rgba(0,0,0,0.1);
        }
        .sidebar h1 {
            color: #84CBCB;
            margin-bottom: 20px;
            font-size: 24px;
        }
        .sidebar ul {
            list-style-type: none;
        }
        .sidebar ul li {
            margin: 15px 0;
            cursor: pointer;
            color: #333;
        }
        .sidebar ul li:hover {
            color: #84CBCB;
        }

        /* Main Content */
        .main {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        /* Top Header */
        .header {
            background-color: #84CBCB;
            height: 50px;
            display: flex;
            align-items: center;
            padding-left: 20px;
            color: white;
            font-size: 18px;
        }

        /* Table Section */
        .content {
            display: flex;
            flex: 1;
        }
        .table-container {
            flex: 2;
            padding: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
            box-shadow: 0px 2px 5px rgba(0,0,0,0.1);
        }
        th, td {
            padding: 10px;
            border-bottom: 1px solid #ccc;
            text-align: center;
        }
        th {
            background-color: #f0f0f0;
        }
        .btn-update {
            padding: 5px 10px;
            background-color: #5cb85c;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 4px;
        }
        .btn-delete {
            padding: 5px 10px;
            background-color: #d9534f;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 4px;
        }
        .btn-update:hover, .btn-delete:hover {
            opacity: 0.8;
        }

        .btn-search {
            padding: 8px 15px;
            background-color: #007BFF;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 10px;
        }
        .btn-search:hover {
            background-color: #0056b3;
        }

        /* Form Section */
        .form-container {
            background-color: #84CBCB;
            padding: 20px;
            width: 300px;
        }
        .form-container h3 {
            color: #fff;
            margin-bottom: 10px;
        }
        .form-container input {
            width: 100%;
            margin: 10px 0;
            padding: 8px;
            border: none;
            border-radius: 4px;
        }
        .form-container .create-btn {
            width: 100%;
            padding: 7px;
            background-color: #007BFF;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 4px;
            text-align: center;
            margin: 5px;
        }
        .form-container .create-btn:hover {
            background-color: #0056b3;
        }

        
    .error-message {
        color: red;
        font-size: 12px;
    }

    #addOffer{
        background-color: #84CBCB;
        color: white;
        border: none;
        margin: 5px;
        padding: 10px 15px;
        border-radius: 5px;
    }

    #offerType{
        width: 100%;
        height: 30px;
    }

    #discountType{
        width: 100%;
        height: 30px;
    }

    #categoryProduct {
    width: 100%; /* Adjust as needed */
    max-width: 300px; /* Set a max width */
    min-width: 250px; /* Set a min width */
    height: 30px; /* Fix height */
    overflow: hidden; /* Prevent content overflow */
    text-overflow: ellipsis; /* Show "..." for long text */
    white-space: nowrap; /* Prevent text from wrapping */
    padding: 5px; /* Adjust padding */
    border: 1px solid #ccc; /* Border styling */
    border-radius: 5px; /* Optional: Rounded corners */
}


    </style>
</head>
<body>
   

    <!-- Main Section -->
    <div class="main">
        <!-- Header -->
        <%- include("../../views/partials/admin/header.ejs")%>
<!-- 
        <div class="header">Products Management</div> -->

        <!-- Table and Form Content -->
        <div class="content">
            <!-- Table -->
            <div class="table-container">
                <div style="display: flex; align-items: center; margin-bottom: 10px;">
                    <input type="text" placeholder="Search products" style="flex: 1; padding: 8px; border-radius: 4px; border: 1px solid #ccc;">
                    <button class="btn-search">Search</button>
                    <button id="addOffer">Add New Offer </button>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Offer Name</th>
                            <th>Type</th>
                            <th>Category / Product</th>
                            <th>Discount Type</th>
                            <th>Discount</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Status</th>
                            
                            <th>Update</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (offers && offers.length > 0) { %>  
                            <% offers.forEach(offer => { %>
                        <tr>
                            <td><%= offer.name%></td>
                            <td><%= offer.type%></td>
                            <td>
                                <% if (offer.categoryOrProduct) { %>
                                    <%= offer.categoryOrProduct.name || offer.categoryOrProduct.productName %>
                                <% } else { %>
                                    Not Found
                                <% } %>
                            </td>                            <td><%= offer.discountType%></td>
                            <td> <%= offer.discountType === 'Percentage' ? offer.discountValue + '%' : '₹' + offer.discountValue %></td>
                            <td><%= new Date(offer.startDate).toLocaleDateString() %></td>
                            <td><%= new Date(offer.endDate).toLocaleDateString() %></td>

                            <td><%= offer.status%></td>
                           
                            <td><button class="btn-update" onclick="openEditForm('<%= offer._id %>')">Update</button></td>
                            <td><button class="btn-delete" onclick="deleteOffer('<%= offer._id %>')">Delete</button></td>
                         </tr>
                        <%})%>
                       <%} else {%>
                        <p>No offers Available Now!</p>
                        <%}%>
                    </tbody>
                </table>
            </div>

            <!-- Form -->
            <div class="form-container" id="offer-container" style="display: none;">
                <form action="/admin/addOffer" method="POST" id="offerForm">
                    <h3>Add New Offer</h3>
            
                    <label for="offerName">Offer Name</label>
                    <input type="text" id="offerName" name="offerName" placeholder="Offer name">
                    <div id="offerNameError" class="error-message"></div>
            
                    <label for="offerType">Offer Type</label>
                    <select id="offerType" name="offerType">
                        <option value="">Select Offer Type</option>
                        <option value="Category">Category</option>
                        <option value="Product">Product</option>
                    </select>
                    <div id="offerTypeError" class="error-message"></div>
            
                    <label for="categoryProduct">Category/Product</label>
                    <select id="categoryProduct" name="categoryProduct">
                        <option value="">Select Category or Product</option>
                    </select>
                    <div id="categoryProductError" class="error-message"></div>
            
                    <label for="discountType">Discount Type</label>
                    <select id="discountType" name="discountType">
                        <option value="Percentage">Percentage</option>
                        <option value="Fixed Amount">Fixed Amount</option>
                    </select>
                    <div id="discountTypeError" class="error-message"></div>
            
                    <label for="discountValue">Discount Value</label>
                    <input type="text" id="discountValue" name="discountValue" placeholder="Discount value">
                    <div id="discountValueError" class="error-message"></div>
            
                    <label for="startDate">Start Date</label>
                    <input type="date" class="form-control" id="startDate" name="startDate">
                    <div id="startDateError" class="error-message"></div>
            
                    <label for="endDate">End Date</label>
                    <input type="date" class="form-control" id="endDate" name="endDate">
                    <div id="endDateError" class="error-message"></div>
            
                    <label for="description">Description</label>
                    <input type="text" id="description" name="description" placeholder="description">
                    <div id="descriptionError" class="error-message"></div>
            
                    <div style="display: flex;">
                        <button type="button" class="create-btn" id="close-form">Back</button>
                        <button type="submit" class="create-btn">Create</button>
                    </div>
                </form>
            </div>
            


            <div class="form-container" id="editoffer-container" style="display: none;">
                <form action="/admin/editOffer" method="POST" id="editofferForm">
                    <h3>Edit Offer</h3>
            
                    <!-- Hidden input to store offer ID -->
                    <input type="hidden" id="offerId" name="offerId">
            
                    <label for="offerName">Offer Name</label>
                    <input type="text" id="editofferName" name="editofferName" placeholder="Offer name">
                    
                    <label for="offerType">Offer Type</label>
                    <select id="editofferType" name="editofferType">
                        <option value="">Select Offer Type</option>
                        <option value="Category">Category</option>
                        <option value="Product">Product</option>
                    </select>
            
                    <label for="categoryProduct">Category/Product</label>
                    <select id="editcategoryProduct" name="editcategoryProduct">
                        <option value="">Select Category or Product</option>
                    </select>
            
                    <label for="discountType">Discount Type</label>
                    <select id="editdiscountType" name="editdiscountType">
                        <option value="Percentage">Percentage</option>
                        <option value="Fixed Amount">Fixed Amount</option>
                    </select>
            
                    <label for="discountValue">Discount Value</label>
                    <input type="text" id="editdiscountValue" name="editdiscountValue" placeholder="Discount value">
            
                    <label for="startDate">Start Date</label>
                    <input type="date" class="form-control" id="editstartDate" name="editstartDate">
            
                    <label for="endDate">End Date</label>
                    <input type="date" class="form-control" id="editendDate" name="editendDate">
            
                    <label for="description">Description</label>
                    <input type="text" id="editdescription" name="editdescription" placeholder="description">
            
                    <div style="display: flex;">
                        <button type="button" class="create-btn" id="editclose-form">Back</button>
                        <button type="submit" class="create-btn">Update</button>
                    </div>
                </form>
            </div>
            

        </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
    const offerbutton = document.getElementById('addOffer')
    const offerform = document.getElementById('offer-container')
    const closebtn = document.getElementById('close-form')

    offerbutton.addEventListener('click',()=>{
        if(offerform.style.display="none"){
            offerform.style.display='block';
        }else{
            offerbutton.style.display='block';
            offerform.style.display='none'
        }
    })

    closebtn.addEventListener('click',()=>{
        if(offerform.style.display='block'){
            offerform.style.display='none'
        }
    })

    
    // Basic validation for the form fields
    document.getElementById('offerForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        let hasError = false;
        clearErrors(); // Clear any previous error messages

        const offerName = document.getElementById('offerName').value;
        const offerType = document.getElementById('offerType').value;
        const categoryProduct = document.getElementById('categoryProduct').value;
        const discountType = document.getElementById('discountType').value;
        const discountValue = document.getElementById('discountValue').value;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

        // Validate fields
        if (!offerName) {
            showError('offerName', 'Offer Name is required');
            hasError = true;
        }
        if (!offerType) {
            showError('offerType', 'Offer Type is required');
            hasError = true;
        }
        if (!categoryProduct) {
            showError('categoryProduct', 'Category/Product is required');
            hasError = true;
        }
        if (!discountType) {
            showError('discountType', 'Discount Type is required');
            hasError = true;
        }
        if (isNaN(discountValue) || discountValue <= 0) {
            showError('discountValue', 'Discount Value must be a positive number');
            hasError = true;
        }
        if (!startDate) {
            showError('startDate', 'Start Date is required');
            hasError = true;
        }
        if (!endDate) {
            showError('endDate', 'End Date is required');
            hasError = true;
        }

        if (!hasError) {
            this.submit(); // Submit the form if no errors
        }
    });

    // Function to show error messages
    function showError(field, message) {
        document.getElementById(`${field}Error`).innerText = message;
    }

    // Function to clear error messages
    function clearErrors() {
        const errorElements = document.querySelectorAll('.error-message');
        errorElements.forEach((el) => {
            el.innerText = '';
        });
    }

    document.getElementById('offerType').addEventListener('change', function() {
        const offerType = this.value;
        const categoryProductSelect = document.getElementById('categoryProduct');
        categoryProductSelect.disabled = false;

        // Clear previous options
        categoryProductSelect.innerHTML = '<option value="">Select Category or Product</option>';

        if (offerType === 'Category') {
            // Fetch and populate categories from the server (example call)
            fetch('/api/getCategories')  // Ensure you implement this API to return categories
                .then(response => response.json())
                .then(categories => {
                    categories.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category._id;
                        option.textContent = category.name;
                        categoryProductSelect.appendChild(option);
                    });
                });
        } else if (offerType === 'Product') {
            // Fetch and populate products from the server (example call)
            fetch('/api/getProducts')  // Ensure you implement this API to return products
                .then(response => response.json())
                .then(products => {
                    products.forEach(product => {
                        const option = document.createElement('option');
                        option.value = product._id;
                        option.textContent = product.name;
                        categoryProductSelect.appendChild(option);
                    });
                });
        }
    });

    document.addEventListener("DOMContentLoaded", function () {
    const offerTypeDropdown = document.getElementById("offerType");
    const categoryProductDropdown = document.getElementById("categoryProduct");

    offerTypeDropdown.addEventListener("change", function () {
        const selectedType = this.value;
        console.log("🔥 Selected Offer Type:", selectedType); // Debug log

        categoryProductDropdown.innerHTML = '<option value="">Select Category or Product</option>';

        if (!selectedType) {
            categoryProductDropdown.disabled = true;
            return;
        }

        categoryProductDropdown.disabled = false;

        fetch(`/admin/getItems?type=${selectedType}`)
            .then(response => response.json())
            .then(data => {
                console.log("🔥 Fetched Data:", data); // Debug log

                if (data.success) {
                    categoryProductDropdown.innerHTML = '<option value="">Select an option</option>';
                    data.items.forEach(item => {
                        const option = document.createElement("option");
                        option.value = item._id;
                        option.textContent = item.name;
                        categoryProductDropdown.appendChild(option);
                    });
                } else {
                    console.error("❌ Failed to fetch items:", data.message);
                }
            })
            .catch(error => console.error("❌ Error fetching items:", error));
    });
});

const updateButton = document.getElementById('updateOfferBtn')
const updateForm = document.getElementById('editoffer-container')
const CloseButton = document.getElementById('editclose-form')

updateButton.addEventListener('click',()=>{
    if(updateForm.style.display==='none'){
        updateForm.style.display='block'
    }
})
CloseButton.addEventListener('click',()=>{
    if(updateForm.style.display==='block'){
        updateForm.style.display='none'

    }
})

async function openEditForm(offerId) {
        try {
            const response = await fetch(`/admin/getOffer/${offerId}`);
            const offer = await response.json();

            if (offer) {
                document.getElementById("offerId").value = offer._id;
                document.getElementById("editofferName").value = offer.name;
                document.getElementById("editofferType").value = offer.type;

                // document.getElementById("editcategoryProduct").value = offer.categoryOrProduct?._id || '';
                let categoryProductDropdown = document.getElementById("categoryProduct");
            categoryProductDropdown.innerHTML = ""; // Clear existing options

            // Fetch categories or products dynamically based on offer type
            const categoryProductResponse = await fetch(`/admin/getCategoriesOrProducts?type=${offer.type}`);
            const categoryProductList = await categoryProductResponse.json();

            // Add default "Select Category/Product" option
            let defaultOption = document.createElement("option");
            defaultOption.textContent = "Select Category or Product";
            defaultOption.value = "";
            categoryProductDropdown.appendChild(defaultOption);

            let selectedValue = offer.categoryOrProduct?._id; // Get the stored category/product ID

            categoryProductList.forEach(item => {
                let option = document.createElement("option");
                option.value = item._id;
                option.textContent = item.name || item.productName;
                categoryProductDropdown.appendChild(option);
            });

            // After options are populated, set the selected value
            categoryProductDropdown.value = selectedValue || ""; // Ensure the correct value is selected


                document.getElementById("editdiscountType").value = offer.discountType;
                document.getElementById("editdiscountValue").value = offer.discountValue;
                document.getElementById("editstartDate").value = offer.startDate.split('T')[0];
                document.getElementById("editendDate").value = offer.endDate.split('T')[0];
                document.getElementById("editdescription").value = offer.description;

                document.getElementById("editoffer-container").style.display = "block";
            }
        } catch (error) {
            console.error("Error fetching offer details:", error);
        }
    }

    
    
    async function deleteOffer(offerId) {
        const confirmDelete = await Swal.fire({
            title: "Are you sure?",
            text: "This action cannot be undone!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Yes, delete it!",
            cancelButtonText: "Cancel"
        });

        if (confirmDelete.isConfirmed) {
            try {
                const response = await fetch(`/admin/deleteOffer/${offerId}`, {
                    method: "DELETE",
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        title: "Deleted!",
                        text: "Offer has been deleted successfully.",
                        icon: "success",
                        confirmButton:false,
                        timer:1500,
                    }).then(() => {
                        location.reload(); // Reload the page to update the offer list
                    });
                } else {
                    Swal.fire({
                        title: "Error!",
                        text: "Error deleting offer: " + result.message,
                        icon: "error",
                        confirmButton:false,
                        timer:1500,
                    });
                }
            } catch (error) {
                Swal.fire({
                    title: "Error!",
                    text: "An error occurred while deleting the offer.",
                    icon: "error",
                    confirmButtonColor: false,
                    timer:1500,
                });
            }
        }
    }

</script>
    

</body>
</html>
